// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/token_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dtos "github.com/Mir00r/auth-service/internal/models/dtos"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenServiceInterface is a mock of TokenServiceInterface interface.
type MockTokenServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceInterfaceMockRecorder
}

// MockTokenServiceInterfaceMockRecorder is the mock recorder for MockTokenServiceInterface.
type MockTokenServiceInterfaceMockRecorder struct {
	mock *MockTokenServiceInterface
}

// NewMockTokenServiceInterface creates a new mock instance.
func NewMockTokenServiceInterface(ctrl *gomock.Controller) *MockTokenServiceInterface {
	mock := &MockTokenServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTokenServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenServiceInterface) EXPECT() *MockTokenServiceInterfaceMockRecorder {
	return m.recorder
}

// InitiatePasswordReset mocks base method.
func (m *MockTokenServiceInterface) InitiatePasswordReset(req dtos.PasswordResetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePasswordReset", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiatePasswordReset indicates an expected call of InitiatePasswordReset.
func (mr *MockTokenServiceInterfaceMockRecorder) InitiatePasswordReset(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePasswordReset", reflect.TypeOf((*MockTokenServiceInterface)(nil).InitiatePasswordReset), req)
}

// Logout mocks base method.
func (m *MockTokenServiceInterface) Logout(tokenString, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", tokenString, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockTokenServiceInterfaceMockRecorder) Logout(tokenString, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockTokenServiceInterface)(nil).Logout), tokenString, userID)
}

// RefreshToken mocks base method.
func (m *MockTokenServiceInterface) RefreshToken(req dtos.RefreshTokenRequest) (*dtos.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", req)
	ret0, _ := ret[0].(*dtos.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockTokenServiceInterfaceMockRecorder) RefreshToken(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).RefreshToken), req)
}

// ResetPassword mocks base method.
func (m *MockTokenServiceInterface) ResetPassword(req dtos.ConfirmPasswordResetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockTokenServiceInterfaceMockRecorder) ResetPassword(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockTokenServiceInterface)(nil).ResetPassword), req)
}
